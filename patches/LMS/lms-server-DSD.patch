diff --git a/CPAN/arch/5.14/i386-linux-thread-multi-64int/auto/Audio/Scan/Scan.so b/CPAN/arch/5.14/i386-linux-thread-multi-64int/auto/Audio/Scan/Scan.so
index 24401a9..aec5d10 100755
Binary files a/CPAN/arch/5.14/i386-linux-thread-multi-64int/auto/Audio/Scan/Scan.so and b/CPAN/arch/5.14/i386-linux-thread-multi-64int/auto/Audio/Scan/Scan.so differ
diff --git a/CPAN/arch/5.14/i386-linux-thread-multi/auto/Audio/Scan/Scan.so b/CPAN/arch/5.14/i386-linux-thread-multi/auto/Audio/Scan/Scan.so
index 4932ae8..aec5d10 100755
Binary files a/CPAN/arch/5.14/i386-linux-thread-multi/auto/Audio/Scan/Scan.so and b/CPAN/arch/5.14/i386-linux-thread-multi/auto/Audio/Scan/Scan.so differ
diff --git a/Slim/Formats.pm b/Slim/Formats.pm
index 646b38f..9eb9d9d 100644
--- a/Slim/Formats.pm
+++ b/Slim/Formats.pm
@@ -64,6 +64,8 @@ sub init {
 		'ape' => 'Slim::Formats::APE',
 		'wvp' => 'Slim::Formats::WavPack',
 		'ogf' => 'Slim::Formats::OggFLAC',
+		'dff' => 'Slim::Formats::DFF',
+		'dsf' => 'Slim::Formats::DSF',
 
 		# Playlist types
 		'asx' => 'Slim::Formats::Playlists::ASX',
diff --git a/Slim/Formats/DFF.pm b/Slim/Formats/DFF.pm
new file mode 100644
index 0000000..c5809f6
--- /dev/null
+++ b/Slim/Formats/DFF.pm
@@ -0,0 +1,50 @@
+package Slim::Formats::DFF;
+
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License,
+# version 2.
+
+use strict;
+use Slim::Utils::Log;
+
+use base qw(Slim::Formats::DSD);
+
+my $sourcelog = logger('player.source');
+
+sub getInitialAudioBlock {
+	my ($class, $fh, $track) = @_;
+
+	open my $localFh, '<&=', $fh;
+	seek $localFh, 0, 0;
+	
+	my $s = Audio::Scan->scan_fh( dff => $localFh );
+	
+	main::DEBUGLOG && $sourcelog->is_debug && $sourcelog->debug( 'Reading initial audio block: length ' . $s->{info}->{audio_offset} );
+	
+	seek $localFh, 0, 0;
+	read $localFh, my $buffer, $s->{info}->{audio_offset};
+	
+	close $localFh;
+
+	return $buffer;
+}
+
+sub findFrameBoundaries {
+	my ( $class, $fh, $offset, $time ) = @_;
+
+	if ( !defined $fh || !defined $time ) {
+		return 0;
+	}
+
+	open my $localFh, '<&=', $fh;
+	seek $localFh, 0, 0;
+
+	my $s = Audio::Scan->scan_fh( dff => $localFh );
+	my $info = $s->{info};
+
+	close $localFh;
+
+	return $info->{audio_offset} + (int($info->{samplerate} / 8 * $time) * $info->{channels});
+}
+
+1;
diff --git a/Slim/Formats/DSD.pm b/Slim/Formats/DSD.pm
new file mode 100644
index 0000000..0690aa5
--- /dev/null
+++ b/Slim/Formats/DSD.pm
@@ -0,0 +1,54 @@
+package Slim::Formats::DSD;
+
+# Copyright (C) 2013 Kimmo <feedback@daphile.com> 
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License,
+# version 2.
+
+use strict;
+use base qw(Slim::Formats);
+
+use Audio::Scan;
+use Slim::Formats::MP3;
+use Slim::Utils::Log;
+
+sub getTag {
+	my $class = shift;
+	my $file  = shift || return {};
+	
+	my $s = Audio::Scan->scan( $file );
+	
+	my $info = $s->{info};
+	my $tags = $s->{tags};
+	
+	return unless $info->{song_length_ms};
+
+	# size is the number of bytes to stream = header + all of audio block
+	$tags->{SIZE}	    = $info->{audio_offset} + $info->{audio_size};
+
+	$tags->{SECS}	    = $info->{song_length_ms} / 1000;
+	$tags->{RATE}	    = $info->{samplerate};
+	$tags->{CHANNELS}   = $info->{channels};
+	$tags->{SAMPLESIZE} = 1;
+	$tags->{LOSSLESS}   = 1;
+
+	if ( $info->{tag_diar_artist} ) { 
+		$tags->{ARTIST} = $info->{tag_diar_artist}; 
+	}
+	if ( $info->{tag_diti_title} ) {
+		$tags->{TITLE} = $info->{tag_diti_title};
+	} 
+	
+	if ( $info->{id3_version} ) {
+		$tags->{TAGVERSION} = $info->{id3_version};
+		Slim::Formats::MP3->doTagMapping($tags);
+	}
+	
+	return $tags;
+}
+
+*getCoverArt = \&Slim::Formats::MP3::getCoverArt;
+
+sub canSeek { 1 }
+
+1;
diff --git a/Slim/Formats/DSF.pm b/Slim/Formats/DSF.pm
new file mode 100644
index 0000000..94f8e51
--- /dev/null
+++ b/Slim/Formats/DSF.pm
@@ -0,0 +1,56 @@
+package Slim::Formats::DSF;
+
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License,
+# version 2.
+
+use strict;
+use Slim::Utils::Log;
+
+use base qw(Slim::Formats::DSD);
+
+my $sourcelog = logger('player.source');
+
+sub getInitialAudioBlock {
+	my ($class, $fh, $track) = @_;
+
+	open my $localFh, '<&=', $fh;
+	seek $localFh, 0, 0;
+	
+	my $s = Audio::Scan->scan_fh( dsf => $localFh );
+	
+	main::DEBUGLOG && $sourcelog->is_debug && $sourcelog->debug( 'Reading initial audio block: length ' . $s->{info}->{audio_offset} );
+	
+	seek $localFh, 0, 0;
+	read $localFh, my $buffer, $s->{info}->{audio_offset};
+	
+	close $localFh;
+
+	return $buffer;
+}
+
+sub findFrameBoundaries {
+	my ( $class, $fh, $offset, $time ) = @_;
+
+	if ( !defined $fh || !defined $time ) {
+		return 0;
+	}
+
+	open my $localFh, '<&=', $fh;
+	seek $localFh, 0, 0;
+
+	my $s = Audio::Scan->scan_fh( dsf => $localFh );
+	my $info = $s->{info};
+
+	close $localFh;
+
+	# reduce total size of audio stream by one sample block when scanning
+	# this will discard the end samples, but is better than playing the padding at the end of the file
+	# a better solution would be to rewrite the audio header with a reduced sample count, but this is more complex..
+	${*$fh}{logicalEndOfStream} -= $s->{info}->{'channels'} * $s->{info}->{'block_size_per_channel'};
+
+	return $info->{audio_offset} + 
+		(int(int($info->{samplerate} / 8 * $time) / $info->{block_size_per_channel}) * $info->{channels} * $info->{block_size_per_channel});
+}
+
+1;
diff --git a/Slim/Player/Squeezebox.pm b/Slim/Player/Squeezebox.pm
index dbcf313..ad4fb91 100644
--- a/Slim/Player/Squeezebox.pm
+++ b/Slim/Player/Squeezebox.pm
@@ -750,6 +750,15 @@ sub stream_s {
 		$pcmchannels     = '?';
 		$outputThreshold = 0;
 
+	} elsif ($format eq 'dff' || $format eq 'dsf') {
+
+		$formatbyte      = 'd';
+		$pcmsamplesize   = '?';
+		$pcmsamplerate   = '?';
+		$pcmendian       = '?';
+		$pcmchannels     = '?';
+		$outputThreshold = 0;
+
 	} elsif ( $handler->isa('Slim::Player::Protocols::SqueezePlayDirect') ) {
 
 		# Format handled by squeezeplay to allow custom squeezeplay protocol handlers
diff --git a/convert.conf b/convert.conf
index a8b7e74..9a5f2d7 100644
--- a/convert.conf
+++ b/convert.conf
@@ -306,3 +306,25 @@ flc flc transcode *
 
 spdr spdr * *
 	 -
+
+dsf dsf * *
+	# IFD
+	-
+
+dff dff * *
+	# IFD
+	-
+
+##
+## dsdplay DSD (dff) -> PCM (flac)
+##
+dff flc * *
+       # FT:{START=-s %t}U:{END=-e %v}D:{RESAMPLE=-r %d}
+       [dsdplay] -u $START$ $END$ $FILE$ $RESAMPLE$
+
+##
+## dsdplay DSD (dsf) -> PCM (flac)
+##
+dsf flc * *
+       # FT:{START=-s %t}U:{END=-e %v}D:{RESAMPLE=-r %d}
+       [dsdplay] -u $START$ $END$ $FILE$ $RESAMPLE$
diff --git a/strings.txt b/strings.txt
index 6668809..7655f02 100644
--- a/strings.txt
+++ b/strings.txt
@@ -11822,6 +11822,38 @@ OGF
 	RU	Ogg FLAC
 	SV	Ogg FLAC
 
+DFF
+	CS	DFF
+	DA	DFF
+	DE	DFF
+	EN	DFF
+	ES	DFF
+	FI	DFF
+	FR	DFF
+	HE	DFF
+	IT	DFF
+	NL	DFF
+	NO	DFF
+	PL	DFF
+	RU	DFF
+	SV	DFF
+
+DSF
+	CS	DSF
+	DA	DSF
+	DE	DSF
+	EN	DSF
+	ES	DSF
+	FI	DSF
+	FR	DSF
+	HE	DSF
+	IT	DSF
+	NL	DSF
+	NO	DSF
+	PL	DSF
+	RU	DSF
+	SV	DSF
+
 MODIFIED
 	CS	Upraveno
 	DA	Ã†ndret
diff --git a/types.conf b/types.conf
index 82d4044..76f48aa 100644
--- a/types.conf
+++ b/types.conf
@@ -16,7 +16,9 @@ asx     asx,wax         video/asx,application/asx,application/vnd.ms-asf,video/x
 css     css             text/css                        - 
 cue     cue             audio/x-cue                     playlist 
 cur     -               audio/x-cue-referenced          -
-dir     -               application/directory           list 
+dff	dff		audio/dff			audio
+dir     -               application/directory           list
+dsf	dsf		audio/dsf			audio 
 dtd     dtd             application/xml-dtd             -
 flc     flac,flc,fla    audio/x-flac,audio/flac         audio
 fec     -               audio/x-cue-flac                playlist
