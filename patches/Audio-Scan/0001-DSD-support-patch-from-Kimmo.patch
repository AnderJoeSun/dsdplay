diff --git a/Scan.xs b/Scan.xs
index 8fd058b..13e911f 100644
--- a/Scan.xs
+++ b/Scan.xs
@@ -32,6 +32,8 @@
 #include "wav.c"
 #include "flac.c"
 #include "wavpack.c"
+#include "dsf.c"
+#include "dsdiff.c"
 
 #include "md5.c"
 #include "jenkins_hash.c"
@@ -67,6 +69,8 @@ struct _types audio_types[] = {
   {"asf", {"wma", "asf", "wmv", 0}},
   {"wav", {"wav", "aif", "aiff", 0}},
   {"wvp", {"wv", 0}},
+  {"dsf", {"dsf", 0}},
+  {"dff", {"dff", 0}},
   {0, {0, 0}}
 };
 
@@ -81,6 +85,8 @@ static taghandler taghandlers[] = {
   { "asf", get_asf_metadata, 0, asf_find_frame, 0 },
   { "wav", get_wav_metadata, 0, 0, 0 },
   { "wvp", get_ape_metadata, get_wavpack_info, 0 },
+  { "dsf", get_dsf_metadata, 0, 0, 0 },
+  { "dff", get_dsdiff_metadata, 0, 0, 0 },
   { NULL, 0, 0, 0 }
 };
 
diff --git a/include/dsdiff.h b/include/dsdiff.h
new file mode 100644
index 0000000..36861b0
--- /dev/null
+++ b/include/dsdiff.h
@@ -0,0 +1,19 @@
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#define DSDIFF_BLOCK_SIZE 4096
+
+int get_dsdiff_metadata(PerlIO *infile, char *file, HV *info, HV *tags);
diff --git a/include/dsf.h b/include/dsf.h
new file mode 100644
index 0000000..197453c
--- /dev/null
+++ b/include/dsf.h
@@ -0,0 +1,19 @@
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#define DSF_BLOCK_SIZE 4096
+
+int get_dsf_metadata(PerlIO *infile, char *file, HV *info, HV *tags);
diff --git a/src/dsdiff.c b/src/dsdiff.c
new file mode 100644
index 0000000..5b75737
--- /dev/null
+++ b/src/dsdiff.c
@@ -0,0 +1,302 @@
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#define PROP_CK  (uint8_t)1
+#define DSD_CK   (uint8_t)2
+#define DIIN_CK  (uint8_t)4
+#define ERROR_CK (uint8_t)128
+#include "dsdiff.h"
+
+#ifdef DEBUG
+#define DLOG "/tmp/dsdiff.debug"
+
+void DEBUG(FILE *debug, char* fmt, ...) {
+  va_list args;
+  va_start(args,fmt);
+  vfprintf(debug,fmt,args);
+  fflush(debug);
+  va_end(args);
+}
+#endif
+
+typedef struct {
+  PerlIO *infile;
+  Buffer *buf;
+  char *file;
+  HV *info;
+  HV *tags;
+
+#ifdef DEBUG
+  FILE *debug;
+#endif
+
+  uint32_t channel_num;
+  uint32_t sampling_frequency;
+  uint64_t metadata_offset; 
+  uint64_t sample_count;
+  uint64_t offset;
+  char *tag_diar_artist; 
+  char *tag_diti_title;
+} dsdiff_info;
+
+static uint8_t
+parse_diin_chunk(dsdiff_info *dsdiff, uint64_t size)
+{
+  uint64_t ck_offset = 0;
+
+  while (ck_offset < size) {
+      char chunk_id[5];
+      uint64_t chunk_size;
+      
+      buffer_clear(dsdiff->buf);
+      PerlIO_seek(dsdiff->infile, dsdiff->offset + ck_offset, SEEK_SET);
+
+      if ( !_check_buf(dsdiff->infile, dsdiff->buf, 12, DSDIFF_BLOCK_SIZE) ) return ERROR_CK;
+      strncpy(chunk_id, (char *)buffer_ptr(dsdiff->buf), 4);
+      chunk_id[4] = '\0';
+      buffer_consume(dsdiff->buf, 4);
+      chunk_size = buffer_get_int64(dsdiff->buf);
+      ck_offset += 12;
+
+#ifdef DEBUG
+      DEBUG(dsdiff->debug, "  diin: %s : %" PRIu64 ",%" PRIu64 "\n", chunk_id, dsdiff->offset + ck_offset, chunk_size);
+#endif
+
+      if ( !strcmp(chunk_id, "DIAR") ) {
+	if ( !_check_buf(dsdiff->infile, dsdiff->buf, chunk_size, DSDIFF_BLOCK_SIZE) ) return ERROR_CK;
+	uint32_t count = buffer_get_int(dsdiff->buf);;
+	dsdiff->tag_diar_artist = (char *)malloc(count + 1);
+	strncpy(dsdiff->tag_diar_artist, (char *)buffer_ptr(dsdiff->buf), count);
+	dsdiff->tag_diar_artist[count] = '\0';
+      } else if ( !strcmp(chunk_id, "DITI") ) {
+	if ( !_check_buf(dsdiff->infile, dsdiff->buf, chunk_size, DSDIFF_BLOCK_SIZE) ) return ERROR_CK;
+	uint32_t count = buffer_get_int(dsdiff->buf);;
+	dsdiff->tag_diti_title = (char *)malloc(count + 1);
+	strncpy(dsdiff->tag_diti_title, (char *)buffer_ptr(dsdiff->buf), count);
+	dsdiff->tag_diti_title[count] = '\0';
+      } else if ( !strcmp(chunk_id, "ID3 ") ) {
+	dsdiff->metadata_offset = dsdiff->offset + ck_offset - 12;
+      }
+
+      ck_offset += chunk_size;
+  }
+
+  return DIIN_CK;
+}
+
+static uint8_t
+parse_prop_chunk(dsdiff_info *dsdiff, uint64_t size)
+{
+  uint64_t ck_offset = 0;
+
+  if ( !_check_buf(dsdiff->infile, dsdiff->buf, 4, DSDIFF_BLOCK_SIZE) ) return ERROR_CK;
+  if ( strncmp( (char *)buffer_ptr(dsdiff->buf), "SND ", 4 ) ) return 0;
+  ck_offset += 4;
+
+  while (ck_offset < size) {
+      char chunk_id[5];
+      uint64_t chunk_size;
+      
+      buffer_clear(dsdiff->buf);
+      PerlIO_seek(dsdiff->infile, dsdiff->offset + ck_offset, SEEK_SET);
+
+      if ( !_check_buf(dsdiff->infile, dsdiff->buf, 16, DSDIFF_BLOCK_SIZE) ) return ERROR_CK;
+      strncpy(chunk_id, (char *)buffer_ptr(dsdiff->buf), 4);
+      chunk_id[4] = '\0';
+      buffer_consume(dsdiff->buf, 4);
+      chunk_size = buffer_get_int64(dsdiff->buf);
+      ck_offset += 12;
+
+#ifdef DEBUG
+      DEBUG(dsdiff->debug, "  prop: %s : %" PRIu64 ",%" PRIu64 "\n", chunk_id, dsdiff->offset + ck_offset, chunk_size);
+#endif
+
+      if ( !strcmp(chunk_id, "FS  ") ) {
+	dsdiff->sampling_frequency = buffer_get_int(dsdiff->buf);
+      } else if ( !strcmp(chunk_id, "CHNL") ) {
+	dsdiff->channel_num = (uint32_t)buffer_get_short(dsdiff->buf);
+      }
+      ck_offset += chunk_size;
+  }
+
+  if (dsdiff->channel_num == 0 || dsdiff->sampling_frequency == 0) return ERROR_CK;
+
+  return PROP_CK;
+}
+
+int
+get_dsdiff_metadata(PerlIO *infile, char *file, HV *info, HV *tags)
+{
+  Buffer buf;
+  uint8_t flags = 0;
+  off_t file_size;
+  int err = 0;
+  uint64_t total_size;
+  dsdiff_info dsdiff;
+
+  dsdiff.infile = infile;
+  dsdiff.buf = &buf;
+  dsdiff.file = file;
+  dsdiff.info = info;
+  dsdiff.tags = tags;
+  dsdiff.channel_num = 0;
+  dsdiff.sampling_frequency = 0;
+  dsdiff.metadata_offset = 0; 
+  dsdiff.offset = 0;
+  dsdiff.tag_diar_artist = NULL; 
+  dsdiff.tag_diti_title = NULL;
+
+#ifdef DEBUG
+  dsdiff.debug = fopen(DLOG, "a");
+  DEBUG(dsdiff.debug, "DSDIFF: %s\n", file);
+#endif
+
+  file_size = _file_size(infile);
+  
+  buffer_init(&buf, DSDIFF_BLOCK_SIZE);
+  
+  if ( !_check_buf(infile, &buf, 16, DSDIFF_BLOCK_SIZE) ) {
+    err = -1;
+    goto out;
+  }
+  
+  if ( !strncmp( (char *)buffer_ptr(&buf), "FRM8", 4 ) ) {
+    buffer_consume(&buf, 4);
+    total_size = buffer_get_int64(&buf) + 12;
+    dsdiff.offset += 12;
+  
+    if (strncmp( (char *)buffer_ptr(&buf), "DSD ", 4 ) ) {
+      PerlIO_printf(PerlIO_stderr(), "Invalid DSDIFF file header: %s\n", file);
+      err = -1;
+      goto out;
+    }
+    dsdiff.offset += 4;
+
+    my_hv_store( info, "file_size", newSVuv(file_size) );
+
+    while (dsdiff.offset < total_size) {
+      char chunk_id[5];
+      uint64_t chunk_size;
+
+      buffer_clear(&buf);
+      PerlIO_seek(infile, dsdiff.offset, SEEK_SET);
+
+      if ( !_check_buf(infile, &buf, 12, DSDIFF_BLOCK_SIZE) ) {
+	PerlIO_printf(PerlIO_stderr(), "DSDIFF file error: %s\n", file);
+	err = -1;
+	goto out;
+      };
+      
+      strncpy(chunk_id, (char *)buffer_ptr(&buf), 4);
+      chunk_id[4] = '\0';
+      buffer_consume(&buf, 4);
+      chunk_size = buffer_get_int64(&buf);
+      dsdiff.offset += 12;
+
+#ifdef DEBUG
+      DEBUG(dsdiff.debug, "%s: %" PRIu64 ",%" PRIu64 "\n", chunk_id, dsdiff.offset, chunk_size);
+#endif
+
+      if (!strcmp(chunk_id, "PROP")) {
+	flags |= parse_prop_chunk(&dsdiff, chunk_size);
+      } else if (!strcmp(chunk_id, "DIIN")) {
+	flags |= parse_diin_chunk(&dsdiff, chunk_size);
+      } else if (!strcmp(chunk_id, "DSD ")) {
+	dsdiff.sample_count = 8 * chunk_size / dsdiff.channel_num;
+	flags |= DSD_CK;
+      }
+
+      if ( flags & ERROR_CK ) {
+	PerlIO_printf(PerlIO_stderr(), "DSDIFF chunk error: %s\n", file);
+	err = -1;
+	goto out;
+      };
+
+      dsdiff.offset += chunk_size;
+      if (flags == (DSD_CK | DIIN_CK | PROP_CK)) break;
+    }
+
+#ifdef DEBUG
+    DEBUG(dsdiff.debug, "Finished parsing...\n");
+#endif
+
+    if ((flags & DSD_CK) == 0 || (flags & PROP_CK) == 0) {
+      PerlIO_printf(PerlIO_stderr(), "DSDIFF file error: %s\n", file);
+      err = -1;
+      goto out;
+    };
+    
+#ifdef DEBUG
+    DEBUG(dsdiff.debug, "audio_size: %" PRIu64 "\n", dsdiff.sample_count / 8 * dsdiff.channel_num);
+    DEBUG(dsdiff.debug, "samplerate: %" PRIu32 "\n", dsdiff.sampling_frequency);
+    DEBUG(dsdiff.debug, "song_length_ms: %f\n", (dsdiff.sample_count * 1000.) / dsdiff.sampling_frequency);
+    DEBUG(dsdiff.debug, "channels: %" PRIu32 "\n", dsdiff.channel_num);
+#endif
+
+    my_hv_store( info, "audio_size", newSVuv(dsdiff.sample_count / 8 * dsdiff.channel_num) );
+    my_hv_store( info, "samplerate", newSVuv(dsdiff.sampling_frequency) );
+    my_hv_store( info, "song_length_ms", newSVuv( (dsdiff.sample_count * 1000.) / dsdiff.sampling_frequency ) );
+    my_hv_store( info, "channels", newSVuv(dsdiff.channel_num) );
+    my_hv_store( info, "bits_per_sample", newSVuv(1) );
+
+    if (dsdiff.tag_diar_artist) {
+      my_hv_store( info, "tag_diar_artist", newSVpv(dsdiff.tag_diar_artist, 0) );
+      free(dsdiff.tag_diar_artist);
+    }
+
+    if (dsdiff.tag_diti_title) {
+      my_hv_store( info, "tag_diti_title", newSVpv(dsdiff.tag_diti_title, 0) );
+      free(dsdiff.tag_diti_title);
+    }
+
+#ifdef DEBUG
+    DEBUG(dsdiff.debug, "Stored info values...\n");
+#endif
+
+    if (dsdiff.metadata_offset) {
+      PerlIO_seek(infile, dsdiff.metadata_offset, SEEK_SET);
+      buffer_clear(&buf);
+      if ( !_check_buf(infile, &buf, 10, DSDIFF_BLOCK_SIZE) ) {
+	goto out;
+      }
+      
+      unsigned char *bptr = buffer_ptr(&buf);
+      if (
+	  (bptr[0] == 'I' && bptr[1] == 'D' && bptr[2] == '3') &&
+	  bptr[3] < 0xff && bptr[4] < 0xff &&
+	  bptr[6] < 0x80 && bptr[7] < 0x80 && bptr[8] < 0x80 && bptr[9] < 0x80
+	  ) {        
+	parse_id3(infile, file, info, tags, dsdiff.metadata_offset, file_size);
+      }
+    }
+  } else {
+    PerlIO_printf(PerlIO_stderr(), "Invalid DSF file: missing DSD header: %s\n", file);
+    err = -1;
+    goto out;
+  }
+  
+ out:
+  buffer_free(&buf);
+  
+#ifdef DEBUG
+  DEBUG(dsdiff.debug, "Bye!\n");
+  fclose(dsdiff.debug);
+#endif
+  
+  if (err) return err;
+  
+  return 0;
+}
diff --git a/src/dsf.c b/src/dsf.c
new file mode 100644
index 0000000..75aec7c
--- /dev/null
+++ b/src/dsf.c
@@ -0,0 +1,120 @@
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include "dsf.h"
+
+int
+get_dsf_metadata(PerlIO *infile, char *file, HV *info, HV *tags)
+{
+  Buffer buf;
+  off_t file_size;
+  int err = 0;
+  uint64_t chunk_size, total_size, metadata_offset, sample_count;
+  uint32_t format_version, format_id, channel_type, channel_num, 
+    sampling_frequency, block_size_per_channel, bits_per_sample;
+
+  file_size = _file_size(infile);
+  
+  buffer_init(&buf, DSF_BLOCK_SIZE);
+  
+  if ( !_check_buf(infile, &buf, 80, DSF_BLOCK_SIZE) ) {
+    err = -1;
+    goto out;
+  }
+  
+  if ( !strncmp( (char *)buffer_ptr(&buf), "DSD ", 4 ) ) {
+    buffer_consume(&buf, 4);
+  
+    my_hv_store( info, "file_size", newSVuv(file_size) );
+
+    chunk_size = buffer_get_int64_le(&buf);
+    total_size = buffer_get_int64_le(&buf);
+    metadata_offset = buffer_get_int64_le(&buf);
+
+    if ((chunk_size != 28) || 
+	metadata_offset > total_size) {
+      PerlIO_printf(PerlIO_stderr(), "Invalid DSF file header: %s\n", file);
+      err = -1;
+      goto out;
+    }
+
+    if ( strncmp( (char *)buffer_ptr(&buf), "fmt ", 4 ) ) {
+      PerlIO_printf(PerlIO_stderr(), "Invalid DSF file: missing fmt header: %s\n", file);
+      err = -1;
+      goto out;
+    }
+    
+    buffer_consume(&buf, 4);
+    chunk_size = buffer_get_int64_le(&buf);
+    format_version = buffer_get_int_le(&buf);
+    format_id = buffer_get_int_le(&buf);
+    channel_type = buffer_get_int_le(&buf);
+    channel_num = buffer_get_int_le(&buf);
+    sampling_frequency = buffer_get_int_le(&buf);
+    bits_per_sample = buffer_get_int_le(&buf);
+    sample_count = buffer_get_int64_le(&buf);
+    block_size_per_channel = buffer_get_int_le(&buf);
+
+    if ( (chunk_size != 52) ||
+	 (format_version != 1) ||
+	 (format_id != 0) ||
+	 (channel_type != 2) ||
+	 (channel_num != 2) ||
+	 (block_size_per_channel != 4096) ||
+	 strncmp( (char *)buffer_ptr(&buf), "\0\0\0\0", 4 ) ) {
+      PerlIO_printf(PerlIO_stderr(), "Invalid DSF file: unsupported fmt header: %s\n", file);
+      err = -1;
+      goto out;
+    }
+
+    buffer_consume(&buf, 4);
+    
+    my_hv_store( info, "audio_size", newSVuv(sample_count / 8 * channel_num) );
+    my_hv_store( info, "samplerate", newSVuv(sampling_frequency) );
+    my_hv_store( info, "song_length_ms", newSVuv( (sample_count * 1000.) / sampling_frequency ) );
+    my_hv_store( info, "channels", newSVuv(channel_num) );
+    my_hv_store( info, "bits_per_sample", newSVuv(1) );
+
+    if (metadata_offset) {
+      PerlIO_seek(infile, metadata_offset, SEEK_SET);
+      buffer_clear(&buf);
+      if ( !_check_buf(infile, &buf, 10, WAV_BLOCK_SIZE) ) {
+	goto out;
+      }
+
+      unsigned char *bptr = buffer_ptr(&buf);
+      if (
+	  (bptr[0] == 'I' && bptr[1] == 'D' && bptr[2] == '3') &&
+	  bptr[3] < 0xff && bptr[4] < 0xff &&
+	  bptr[6] < 0x80 && bptr[7] < 0x80 && bptr[8] < 0x80 && bptr[9] < 0x80
+	  ) {        
+	parse_id3(infile, file, info, tags, metadata_offset, file_size);
+      }
+    }
+  }
+  else {
+    PerlIO_printf(PerlIO_stderr(), "Invalid DSF file: missing DSD header: %s\n", file);
+    err = -1;
+    goto out;
+  }
+  
+out:
+  buffer_free(&buf);
+
+  if (err) return err;
+
+  return 0;
+}
-- 
1.8.3.1

